---
# certain front matter keys are well known and cause bunch to do stuff
title: Documentation
shortcut: d
open at: 10am
# all other keys assign variables
frontvar: Some new value
srcdir: ~/src/myproject
varfromscript: $ echo thevalue
web site: close after:https://bunchapp.co
onoff: off
somevar: 
---
/*
TODO
-[x] figure out how to do App Completions

-[ ] idea for Brett, a url scheme to validate the syntax of a file

-[ ] display snippet

-[x] frontmatter completion
-[x] get all valid commands for Command Completions
-[x] autocomplete embedded fragment ids
-[ ] embedded fragment completion doesn't work inside of a dictionary

-[x] autocomplete snippet files
-[ ] autocomplete fragment ids from a snippet

-[x] completion on variable transformations ie raw in ${myvar/raw}

-[X] make sure Comment Line and Comment Start Block commands work
-[ ] figure out how to set the default indenting to soft tabs of size 4

-[ ] dialog snippet, how can I insert snippet stuff after the autoinserted closing bracket?
-[ ] add audio device completion using
     $ system_profiler SPAudioDataType -xml | xmllint --xpath '/plist/array/dict/array[2]/dict/array/dict/string[1]' - | sed -e 's|</string><string>|@|g' -e 's|<string>||g' -e 's|</string>||g' | tr '@' '\n' | sort | uniq

	 look at ruby bundle, menu actions > declarations > New Method for how to
	 dynamically build a snippet using a command
-[ ] figure out how to do auto-indenting of arrays like Python and Ruby bundles do,
     and apply it to query array's and query dictionaries
     in Ruby, type '[', 'return' to see the desired behavior
*/

/*
https://bunchapp.co/docs/bunch-files/frontmatter/

Simplified YAML-ish keys and values. Can contain commands and variable
assignments
*/

/*
https://bunchapp.co/docs/bunch-files/comments/

Lines that start with '# ' or '// ' are comments

You can also append ' # ' or ' // ' at the end of a line to make a comment

Block syntax is also supported for single or multi-line
*/

/*
https://bunchapp.co/docs/bunch-files/variables

Variables can be assigned in front matter, or passed into snippets, or
passed in via the URL handler

Variables can be used nearly anywhere
*/

${web site}
%{urlencoded}
${srcdir/raw}
# variables can have a default value, useful in snippets and fragments
${taskapp:OmniFocus}
# variables can also be direct assigned outside of front matter
var1 = some value
# https://bunchapp.co/docs/bunch-files/interactivity/populating-variables/
global var2 = ?"What should var2 ${var1} contain"
# variables can be assigned from a script
var2 = * myscript.applescript
var3 = $ myscript.sh ${var} "arg 2"
# https://bunchapp.co/docs/bunch-files/interactivity/multiple-choice/
var4 = ?[ First, Second, Third ] "Which ${some} one?"

var5 = ?[
    First
    Second
    Third
] "Which one?"
var7 = ?{
    Marked => <coding.snippets#Marked
    Bunch => <coding.snippets#Bunch
    nvUltra => <<#nvUltra
} "Whatcha Coding?"
# https://bunchapp.co/docs/bunch-files/interactivity/external-files/
var8 = ?< scripts/Menu Source.json "Pick your ${thevar} Poison"
var9 = ?<scripts/${somedir}/myfile.yaml

/*
https://bunchapp.co/docs/bunch-files/apps/

Apps and files
*/
(audio  device_name|volume X|mute|unmute
# hide all visible apps (use at top of bunch)
@@

# just a plain ol' app
Messages

# keep running when quitting bunch
%Terminal # comment

# Start a line with @ to "focus" that app (hide others)
# Focus commands should be the last item in the Bunch
# optionally add a delay in case other apps launching ahead of it
# are really slow
@Copy 'Em ~5 # comments ~5

# attempt to hide app after launching
# pipe to ask for parallel execution
# 
|TextMate_

# force forground and unhide
Visual Studio Code^

/*
https://bunchapp.co/docs/bunch-files/run-on-close/
*/

# Start a line with an exclamation point to quit that app when
# starting the bunch
!Twitter
# and restart it when closing the bunch
!!Twitter
# 3 bangs quits an app when closing the bunch, even if the bunch didn't
# start the app
!!!Twitter

# open another bunch
SomeOther.bunch
# with frontmatter variables
- sequence=true 

Tower
# open files by starting a line with a -
- ${srcdir}/myproj
- (pause 5)  // wait 5 seconds before opening next file
- ${srcdir}/anotherproj
- (delay 5)  // delay is a synonym for pause
- ${srcdir}/thirdproj

Finder
# XX is a special command for tell the app to close all windows
- XX
- ~/
-> ${srcdir}/docs  # open in another tab, only works for Finder
- ~/Documents

# Default is a special app, so it gets special treatment
Default
- ~/tmp/Somefile.txt
- ~/Documents/Other file.pages  // with comment at end
# you can also use spotlight here
# https://bunchapp.co/docs/bunch-files/spotlight-searches/
- #Taxes #2020 [~/Dropbox/Receipts] !25
- 'kind:"affinity photo" tag:${tagname} name:template' [~/Dropbox] !5

/*
https://bunchapp.co/docs/bunch-files/logic/

Conditional Logic
*/

if (var_one is NOT "Choice ${var} NOT 1" OR !var_one == "Choice 2")
	var_two = "Project 1"
	<<#Load Project
else if $var_one is "Choice 2"
		if $someother AND (fred OR george)
			var_two = "Project 2"
			Finder
			- ~/tmp/mydir
			# a waiting snippet
			/*
			stuff here
			*/
			Messages
				<<#Load Project
		else if weekday is after friday
			Brave
		else if joe !*= something
			Firefox
		else
			<<#My Fragment
			$ myscript.sh ${somevar} "arg 2"
		end
else
	<<#Load Default
end
if self is opening
    var5 = ?[
    	First
		Second
		Third
	] "Which one?"
end

/*
https://bunchapp.co/docs/bunch-files/interactivity/multiple-choice/

Dialogs can be used to choose which app to run
*/
othertaskmgr = 'Todoist';
?[ Omnifocus, Things, TaskPaper ] "Which Task Manager?"
?[
    Omnifocus
    Things
    TaskPaper
] "Which Task Manager?"
# or to load a snippet
?{ Marked => <coding.snippets#Marked, Bunch => <coding.snippets#Bunch } "Whatcha Coding ${somevar}?" 
?{ Marked => <coding.snippets#Marked, Bunch => <coding.snippets#Bunch }
Safari
?{
	Marked => <coding.snippets#Marked
    Bunch => <coding.snippets#Bunch
    nvUltra => <coding.snippets#nvUltra
} "Whatcha Coding?"
Safari

# checkbox dialogs
-[x] Option 1 => <<#One
-[x] Option 2 => 
-[] Option 3 => <<#Three
---
-[ ] Option 3 => <<#Three
-[x] Omnifocus
-[] iA Writer
-[ ] Spark

# dialogs can be loaded from a file
?< scripts/Menu Source.json "Pick your ${thevar} Poison"
?<scripts/${somedir}/myfile.yaml

/*
https://bunchapp.co/docs/bunch-files/opening-web-pages/

Use a URL at the beginning of a line to open it in your
default browser. URL schemes also work.

Prefix with a browser name and a colon to open in a specific browser
*/

Safari
- https://www.duckduckgo.com

x-marked://open?file=${srcdir}/file_name.md
https://brettterpstra.com/projects
brave:https://www.kotfu.net  // specify which browser to use

/*
https://bunchapp.co/docs/bunch-files/keystrokes/

keystrokes are file lines surrounded by braces
typed strings are file lines surrounded by brackets
*/
Messages
- {@N "typing with a\\!2 pause"}
- (pause 3)
- [Mom tab Hi Mom! return \\!5${longermessage/typed} return]

/* 
https://bunchapp.co/docs/bunch-files/commands/

Commands are enclosed in parenthesis and can have variables
*/
(hide desktop)
# pipe to request parallel execution
|(${showhide} desktop)
# ! prefix means only run this when closing the bunch
!(do not disturb ${onoff/raw} ${onoff}) // comments
# avoid reversing action when closing the bunch
%(show dock)

/*
https://bunchapp.co/docs/bunch-files/scripts/
https://bunchapp.co/docs/bunch-files/run-on-close/
https://bunchapp.co/docs/bunch-files/delay/

Lines starting with * run applescript inline or from a file
Lines starting with & run Automator Workflows
Lines starting with $ run shell scripts, which can have a (display) clause

Script lines beginning with ! are run on close

Append ~4 to delay the launch
*/
* say "Bunch launched"
* "Run This.scpt" "argument 1" "argument 2" ~5
!* say "Bunch closed"
& ~/Dropbox/MyWorkflow.workflow
!& Bunch Workflow
# Automator workflows can take variables
& WorkflowWithVariables
- variable1 = contents with = sign
# shell scripts can have a display command at the end
$ cd ~/Sites/bunch && jekyll serve (display d:1 100%x300 left,top #333 #b0d17d a:95% l:d) ~4
# and do parallel execution
# https://bunchapp.co/docs/bunch-files/scripts/shell-scripts/#order-of-execution
| Safari
| Messages
# delay after display, i.e. voice says "hello 3" after waiting 2 seconds
!$ say hello ~3 (display) ~2
# shell script with a variable as an argument and an environment variable
$ /usr/local/scripts/myscript.sh ${srcdir} arg2
- ENV_VAR=with variable interpolation ${variable1}


/*
https://bunchapp.co/docs/bunch-files/snippets/

*/
<Comms.snippet
<
<MySnip.snippet
<MySnip.snippet#Fragment Name
- withvariable = thevalue
<<
<<#My Fragment
<<#embedded fragment name ~5
# snippet composed of variables
!<${snipvar}#${section}
# a snippet that waits for all the other apps to load before running
    <waiting.snippet#Position
# bunches as snippets
<Comms.bunch ~5
# https://bunchapp.co/docs/bunch-files/interactivity/optional-snippets/
!<Comms.bunch#Social Media ?"Fly into the ${somevar} time-shifting vortex?"
# this isn't interpreted as anything and therefore shouldn't get a scope
<<Snippet

# start marker for an embedded snippet
___
// these should all be fragment headerss; have to have 2 dashes or one
// of = > #, followed by a [
###[Fragment Name]
# [ Fragment ] #########
-------[My Fragment]-----------
-- [Fragment]
------------------------------------------[Frag]--
>>>[Some Fragment]
=[Fragment]== Add a comment, if you like
>-=# [My Fragment] #=-<
